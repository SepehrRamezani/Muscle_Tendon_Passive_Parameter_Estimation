clear all;
close all;
clc;
% Some times there is no need to import raw data because all data will
% save in FinalDatafor first time. readflage=1 means import files again.
readflage= 1;
% folder=uigetdir(); % get Data directory
SubjectNumber='T002';
Project='P006';
folder=append('C:\MyCloud\OneDriveUcf\Real\Simulation\Source\',Project,'\',SubjectNumber);
Datafolder=append(folder,'\Data');
results_folder = append(folder,'\Result');
Pardata=importdata(append(Datafolder,"\","Parameters.csv"));
ResultData.info.ForceRatio=Pardata.data(1);
ResultData.info.M_ThresholdMin=Pardata.data(2);
ResultData.info.M_ThresholdMax=Pardata.data(3);
psname=append(Project,'_',SubjectNumber);
CoordinateName='RKnee';
Subjectname =append(psname,"_",CoordinateName,"_");
Terials1=["Fl"];
Terials2=["H10","H25","H40","H55","H70","H90"];
% Terials2=["H10","H25","H40","H55","H70","H90","H100"];
Terials3=["0","2","5","Q"];
% Terials1=["Fl"];
% Terials2=["IsoK60"];
ArmWeight=2.72;
ArmCOM=0.218;
Fdata=[];

k=0;
% DStime=0.0005192; % desired sampling time
DStime=0.01;
%
ExpMuscle=["RBICF","RSEMT","RMGAS","RRECF","RVASL","RVASM"];

if (readflage)
for T1=1:length(Terials1)
    for T2=1:length(Terials2)
        if T2<=3
            filename=append(Terials1(T1),'_',Terials2(T2),"_",Terials3(4));
            Datadr=append(Datafolder,"\",Subjectname,filename,".csv");
            ResampledData=SampleRateCorrection(Datadr,DStime);
            FinalData.(filename).data=ResampledData.data;
            FinalData.(filename).colheaders=ResampledData.colheaders;
        else
            for T3=1:length(Terials3)
                filename=append(Terials1(T1),'_',Terials2(T2),"_",Terials3(T3));
                Datadr=append(Datafolder,"\",Subjectname,filename,".csv");
                ResampledData=SampleRateCorrection(Datadr,DStime);
                FinalData.(filename).data=ResampledData.data;
                FinalData.(filename).colheaders=ResampledData.colheaders;
            end
        end
    end
end

save ([Datafolder '\RawData.mat'],'FinalData');
end
%%
load ([Datafolder '\RawData.mat']);
Dataheadermotion=['time\tpelvis_tilt\tpelvis_tx\tpelvis_ty\thip_flexion_r\thip_adduction_r\thip_rotation_r\tknee_angle_r\tsubtalar_angle_r\tankle_angle_r'];
Dataheaderforce=['time\treaction_force_vx\treaction_force_vy\treaction_force_vz\treaction_force_px\treaction_force_py\treaction_force_pz\treaction_torque_x\treaction_torque_y\treaction_torque_z'];
DataheaderEMG=['time\t'];
%getting goniometer calibration coefficient
[Ph,Pk,Pa]= GnCalib(Datafolder,psname,0);
for T1=1:length(Terials1)
    for T2=1:length(Terials2)
        EMGHDdata=[""];
        filename=append(Terials1(T1),"_",Terials2(T2));
        Data=FinalData.(filename).data;
        HData=FinalData.(filename).colheaders;
        [rg,ca]=find(strncmp(HData,'Gn A',2));
        %find Knee Goniometer
        [rk,ck]=find(strncmp(HData,'Gn K',4));
        %find Hip goniometer
        [rh,ch]=find(strncmp(HData,'Gn H',4));
        %find Biodex
        [rb,cb]=find(strncmp(HData,'Biodex',6));
        %find EMG
        [re,ce]=find(contains(HData,'EMG')&~contains(HData,'RMS'));
        [r,c]=size(Data);
        %% Process on Motion Data
        
        %knee calibration
        GonK=Data(:,ck(2));
        GonCalibratedK = polyval(Pk,GonK);
        GonCalibratedK(GonCalibratedK<0)=0;
        %Hip calibration
        GonH=Data(:,ch(2));
        GonCalibratedH = polyval(Ph,GonH);
        %Ankle calibration
        GonA=Data(:,ca(2));
        GonCalibratedA = polyval(Pa,GonA);

        %% Save Motion
        delimiterIn='\t';
        F_fnames=append(Subjectname,char(filename),'_Motion.mot');
        Title='\nversion=1\nnRows=%d\nnColumns=%d\nInDegrees=no\nendheader\n';
        MDatadata=[1,0,0.055,1.059,1,0,0,1,0,0].*ones(r,10);
        MDatadata(:,[1,5,8,10])=[Data(:,1),GonCalibratedH,GonCalibratedK,GonCalibratedA];
        Titledata=[r,length(MDatadata(1,:))];
%         makefile(Datafolder,F_fnames,Title,Titledata,Dataheadermotion,MDatadata,5,delimiterIn);
        
        %% Process Force
        %%% Caculating Torque from Arm
        BiodexAngle=-35.55*Data(:,cb(2))+105;
        ArmTorque=cos(BiodexAngle*pi()/180)*ArmWeight*9.8*ArmCOM;
        %%% Calcuating Torque from biodex
        x=1*Data(:,cb(1)); %data of a trial
        TotalTorque=-1.*(141.81.*x-25.047);
        %%% Arm weight compensation 
        Mb=TotalTorque-ArmTorque;
        %% Save Force
        F_fnames=append(Subjectname,char(filename),'_Torque.mot');
        FDatadata=[Data(:,1),zeros(r,8),Mb];
        Titledata=[r,length(FDatadata(1,:))];
%         makefile(Datafolder,F_fnames,Title,Titledata,Dataheaderforce,FDatadata,5,delimiterIn);
        
        %% Process on EMG
        %         EMGChecker(Data(:,ce(1)),HData(ce(1)));
        EMGfilt = EMGFilter(Data(:,ce),0.5,5,4,1/DStime);
        %% Save EMG
        delimiterIn=',';
        F_fnames=append(Subjectname,char(filename),'_EMG.csv');
        DataheaderEMG=['time' delimiterIn];
        for hh=1:length(ce)
%             HD=char(HData(ce(hh)));
%             HD=HD(1:5);
%             switch HD([1:3])
%                 case 'LLH'
%                     HData(ce(hh))='RBICF';
%                 case 'LRF'
%                     HData(ce(hh))='RRECF';
%                 case 'LVL'
%                     HData(ce(hh))='RVASL';
%                 case 'LVM'
%                     HData(ce(hh))='RVASM';
%                 case 'LMH'
%                     HData(ce(hh))='RSEMT';
%                 case 'LMG'
%                     HData(ce(hh))='RMGAS';
%             end
%             DataheaderEMG=[DataheaderEMG char(HData(ce(hh)))(1:5) delimiterIn];
        EMGHDdata(hh) = eraseBetween(HData(ce(hh)),6,length(char(HData(ce(hh)))));
        
        DataheaderEMG=[DataheaderEMG char(EMGHDdata(hh)) delimiterIn];
        end
        EMGHDdata=["time",EMGHDdata];
        Datadata=[Data(:,1),EMGfilt];
        Titledata=[r,length(Datadata(1,:))];
%         makefile (Datafolder,F_fnames,Title,Titledata,DataheaderEMG,Datadata,8,delimiterIn);
        
        %% Finding events
        Event=EventDetection(filename,FDatadata(:,1),FDatadata(:,10),ResultData.info.ForceRatio,MDatadata(:,8),[ResultData.info.M_ThresholdMin ResultData.info.M_ThresholdMax]);
        Stime=Event(:,1);
        Etime=Event(:,2);
        %% Trail check
        if length(Stime)~=3||length(Etime)~=3
            fprintf('\nERROR: %s Wrong trail ...\n\n', filename);
        end
        %% Strat reading Simulation files
        ResultData.(filename).('ExpForce').('full')=[Data(:,1),Mb];
        ResultData.(filename).('Motion').('full')=[Data(:,1),GonCalibratedK];
        ResultData.(filename).('ExpEMG').('full')=[Data(:,1),EMGfilt];
        ResultData.(filename).('ExpEMG').('colheaders')=EMGHDdata;
        for itr=1:length(Stime)
            Expindx=find(Data(:,1)>=Stime(itr)&Data(:,1)<=Etime(itr));
            ResultData.(filename).('time').Exp.(Terials3(itr))=Data(Expindx,1);
            ResultData.(filename).('Motion').(Terials3(itr))=ResultData.(filename).Motion.full(Expindx,2);
            ResultData.(filename).('ExpForce').(Terials3(itr))=ResultData.(filename).ExpForce.full(Expindx,2);
            for Flexmus=1:length(ExpMuscle)
                ResultData.(filename).('ExpEMG').(ExpMuscle(Flexmus)).(Terials3(itr))= ResultData.(filename).ExpEMG.full(Expindx,strncmp(EMGHDdata,ExpMuscle(Flexmus),5));
            end
        end
        
    end
end
save (append(results_folder,"\",psname,"_ResultData.mat"),'ResultData');

