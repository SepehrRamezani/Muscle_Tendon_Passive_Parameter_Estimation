clear all; clc;

model_path  = fullfile(cd,'ScaledModel.osim');
Misc.IKfile = {fullfile('IK_gait.mot'),fullfile('IK_gait.mot')};
Misc.IDfile = {fullfile('ID_gait.sto'),fullfile('ID_gait.sto')};
Misc.EMGfile = {fullfile(pwd,'EMG_gait.mot')};    
time=[1.2 2.3;1.2 2.3];
% Misc.DofNames_Input={'ankle_angle_r','knee_angle_r','hip_flexion_r','hip_adduction_r','hip_rotation_r','ankle_angle_l','knee_angle_l','hip_flexion_l','hip_adduction_l','hip_rotation_l'}; 
Misc.DofNames_Input={'ankle_angle_l','knee_angle_l','hip_flexion_l'};
Misc.OutName ='gait_';
Misc.kT = [];
Out_path = fullfile(cd,'Results_LowerLimb');    

Misc.EMGheaders = {'Time','bifemlh_r','tib_ant_r','per_long_r','lat_gas_r','bifemsh_r','soleus_r','vas_lat_r','vas_med_r','per_brev_l','tib_ant_l','per_long_l',...
    'lat_gas_l','med_gas_l','soleus_l','vas_lat_l','vas_med_l','add_long_l','rect_fem_l','tfl_l','glut_med2_l','bifemsh_l','bifemlh_l','glut_med2_r','rect_fem_r'};
Misc.EMGSelection = {'per_brev_l','tib_ant_l','per_long_l','lat_gas_l','med_gas_l','soleus_l','vas_lat_l','vas_med_l','add_long_l','rect_fem_l','tfl_l','glut_med2_l','bifemsh_l','bifemlh_l'};
Misc.MuscleNames_Input = Misc.EMGSelection;
Misc.Estimate_TendonStiffness = Misc.EMGSelection; % Names of muscles of which tendon stifness is estimated
Misc.lb_kT_scaling = 0.1; % Lower bound for scaling generic tendon stiffness
Misc.ub_kT_scaling = 2.2; % Upper bound for scaling generic tendon stiffness
Misc.Coupled_TendonStiffness = Misc.EMGSelection; % Couple muscles that should have equal tendon stifness
Misc.UStracking  = 0; 

Misc.EMGconstr  = 1;     		% Boolean to select EMG constrained option
Misc.EMGbounds  = [-0.001 0.001];  	% upper and lower bound for difference between simulated and measured muscle activity
Misc.BoundsScaleEMG = [0.01 5];  % maximal value to scale EMG

Misc.PlotBool = 0;
Misc.OutName = 'Knee_Flexion_';
Misc.MRSBool=1;
[Results,DatStore] = solveMuscleRedundancy(model_path,time,Out_path,Misc);
Datafolder=cd;
F_fnames='controls.sto';
% Title=["version=1","nRows=%d","nColumns=%d","InDegrees=no","endheader"];
% Title='\nversion=1\nnRows=%d\nnColumns=%d\nInDegrees=no\nendheader\n';
MDatadata=[Results.Time.genericMRS (Results.MActivation.genericMRS)'];
delimiterIn='\t';
Dataheader=Results.MuscleNames;
Dataheader=[{'time'} Dataheader];
% makefile(Datafolder,F_fnames,Dataheader,MDatadata,5,delimiterIn);

